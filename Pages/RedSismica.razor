@page "/redsismica"
@using System.Globalization // Needed for DateOnly parsing

<PageTitle>Red Sísmica</PageTitle>

<MudContainer  Class="mt-4">

    <MudButton Variant="Variant.Text"
               StartIcon="@Icons.Material.Filled.ArrowBackIos"
               Href=""  // Navigate back to the root/index page
               Class="mb-4"> 
        Volver
    </MudButton>

    <MudGrid Class="mb-4"> 
        <MudItem xs="12" sm="8" md="6"> 
            <MudCard Elevation="2"> 
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Ordenes de inspección</MudText> 
                    <MudText Typo="Typo.body2">Listado de ordenes de inspección cerradas.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-4" Elevation="3"> // Wrap table in MudPaper for visual separation and padding
        <MudTable Items="@inspectionOrders" Dense="true" Hover="true" Striped="true" Breakpoint="Breakpoint.Sm"> 
            <HeaderContent>
                <MudTh>@headings[0]</MudTh>  @* N° Orden *@
                <MudTh>@headings[1]</MudTh>  @* Fecha finalización *@
                <MudTh>@headings[2]</MudTh>  @* Estación *@
                <MudTh>@headings[3]</MudTh>  @* Identificador *@
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="N° Orden">@context.OrderNumber</MudTd>
                <MudTd DataLabel="Fecha finalización">@context.CompletionDate.ToString("dd/MM/yyyy")</MudTd> @* Format the date *@
                <MudTd DataLabel="Estación">@context.Station</MudTd>
                <MudTd DataLabel="Identificador">@context.Identifier</MudTd>
            </RowTemplate>
            <PagerContent> 
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>

</MudContainer>

@code {
    // Headings remain the same
    private string[] headings = { "N° Orden", "Fecha finalización", "Estación", "Identificador" };

    // Use a list of objects instead of strings
    private List<InspectionOrder> inspectionOrders = new List<InspectionOrder>();

    // Populate the data in OnInitialized lifecycle method
    protected override void OnInitialized()
    {
        // Parse the data into the list of objects
        inspectionOrders = new List<InspectionOrder>
        {
            // Use ParseExact for reliable date parsing, assuming dd/MM/yyyy format
            new InspectionOrder { OrderNumber = 1, CompletionDate = DateOnly.ParseExact("27/07/2023", "dd/MM/yyyy", CultureInfo.InvariantCulture), Station = "Cordoba", Identifier = "28.25.250.202" },
            new InspectionOrder { OrderNumber = 2, CompletionDate = DateOnly.ParseExact("11/07/2024", "dd/MM/yyyy", CultureInfo.InvariantCulture), Station = "Parana", Identifier = "237.168.134.114" },
            new InspectionOrder { OrderNumber = 3, CompletionDate = DateOnly.ParseExact("06/06/2024", "dd/MM/yyyy", CultureInfo.InvariantCulture), Station = "Mendoza", Identifier = "92.6.0.175" }
            // Add more orders here if needed
        };
    }

    // Define a class to represent an inspection order
    public class InspectionOrder
    {
        public int OrderNumber { get; set; }
        public DateOnly CompletionDate { get; set; } // Use DateOnly for dates
        public string Station { get; set; }
        public string Identifier { get; set; }
    }
}